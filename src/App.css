.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}






/* Got it! We'll build the School Bus Tracking System without JWT or authentication — just focus on:

Basic backend (no login)

Real-time GPS tracking via WebSocket

React frontend to show the bus on a map

🔧 PHASE 1: DJANGO BACKEND (No Auth)
✅ STEP 1: Setup Project & Install Packages
bash
Copy
Edit
# Create virtual environment
python -m venv venv
source venv/bin/activate  # venv\Scripts\activate on Windows

# Install required packages
pip install django djangorestframework channels channels_redis

# Start project
django-admin startproject bus_tracking
cd bus_tracking
python manage.py startapp core
✅ STEP 2: Configure Settings
bus_tracking/settings.py

python
Copy
Edit
INSTALLED_APPS = [
    ...
    'rest_framework',
    'channels',
    'core',
]

# Channels config
ASGI_APPLICATION = 'bus_tracking.asgi.application'

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [("127.0.0.1", 6379)],
        },
    },
}
✅ STEP 3: Create Models
core/models.py

python
Copy
Edit
from django.db import models

class Bus(models.Model):
    name = models.CharField(max_length=50)

    def __str__(self):
        return self.name


class BusLocation(models.Model):
    bus = models.ForeignKey(Bus, on_delete=models.CASCADE)
    latitude = models.FloatField()
    longitude = models.FloatField()
    timestamp = models.DateTimeField(auto_now=True)
✅ STEP 4: Migrate and Add to Admin
bash
Copy
Edit
python manage.py makemigrations
python manage.py migrate
core/admin.py

python
Copy
Edit
from django.contrib import admin
from .models import Bus, BusLocation

admin.site.register(Bus)
admin.site.register(BusLocation)
✅ STEP 5: WebSocket Setup
bus_tracking/asgi.py

python
Copy
Edit
import os
from channels.routing import ProtocolTypeRouter, URLRouter
from django.core.asgi import get_asgi_application
from channels.auth import AuthMiddlewareStack
import core.routing

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'bus_tracking.settings')

application = ProtocolTypeRouter({
    "http": get_asgi_application(),
    "websocket": AuthMiddlewareStack(
        URLRouter(core.routing.websocket_urlpatterns)
    ),
})
core/consumers.py

python
Copy
Edit
import json
from channels.generic.websocket import AsyncWebsocketConsumer
from .models import Bus, BusLocation
from asgiref.sync import sync_to_async

class BusLocationConsumer(AsyncWebsocketConsumer):
    async def connect(self):
        self.bus_id = self.scope['url_route']['kwargs']['bus_id']
        self.group_name = f'bus_{self.bus_id}'

        await self.channel_layer.group_add(
            self.group_name,
            self.channel_name
        )
        await self.accept()

    async def disconnect(self, close_code):
        await self.channel_layer.group_discard(
            self.group_name,
            self.channel_name
        )

    async def receive(self, text_data):
        data = json.loads(text_data)
        latitude = data['latitude']
        longitude = data['longitude']

        await self.save_location(self.bus_id, latitude, longitude)

        await self.channel_layer.group_send(
            self.group_name,
            {
                'type': 'send_location',
                'latitude': latitude,
                'longitude': longitude,
            }
        )

    async def send_location(self, event):
        await self.send(text_data=json.dumps({
            'latitude': event['latitude'],
            'longitude': event['longitude'],
        }))

    @sync_to_async
    def save_location(self, bus_id, lat, lng):
        bus = Bus.objects.get(id=bus_id)
        BusLocation.objects.create(bus=bus, latitude=lat, longitude=lng)
core/routing.py

python
Copy
Edit
from django.urls import re_path
from . import consumers

websocket_urlpatterns = [
    re_path(r'ws/bus/(?P<bus_id>\d+)/$', consumers.BusLocationConsumer.as_asgi()),
]
🎉 Backend is now ready!

✅ It:

Stores bus location via WebSocket

Sends live updates to connected clients

🚀 PHASE 2: React Frontend
Would you like me to now create:

🚐 Driver page: sends location

🗺️ Student page: shows real-time location on map (Leaflet.js)

📦 React setup from scratch?

Let me know, and I’ll continue!








You said:
yes


ChatGPT said:
Great! Let's now build the ReactJS frontend for your school bus tracking system.

🧩 PHASE 2: ReactJS Frontend (No Auth)
We’ll build two pages:

🚐 Driver Page — sends location to WebSocket

🗺️ Student Page — listens to WebSocket and shows bus location on map using Leaflet.js

✅ Step 1: Set Up React Project
bash
Copy
Edit
npx create-react-app bus-tracking-frontend
cd bus-tracking-frontend

# Install required packages
npm install leaflet react-leaflet
Also install this fix for Leaflet icons:

bash
Copy
Edit
npm install leaflet-defaulticon-compatibility
In index.js, import Leaflet icon compatibility fix:

js
Copy
Edit
import 'leaflet/dist/leaflet.css';
import 'leaflet-defaulticon-compatibility';
import 'leaflet-defaulticon-compatibility/dist/leaflet-defaulticon-compatibility.css';
✅ Step 2: Driver Page – Send Location to WebSocket
Create a new file: src/DriverPage.js

jsx
Copy
Edit
import React, { useState, useEffect } from 'react';

const DriverPage = ({ busId }) => {
  const [ws, setWs] = useState(null);
  const [latitude, setLatitude] = useState('');
  const [longitude, setLongitude] = useState('');

  useEffect(() => {
    const socket = new WebSocket(`ws://localhost:8000/ws/bus/${busId}/`);
    socket.onopen = () => console.log('WebSocket Connected');
    socket.onclose = () => console.log('WebSocket Disconnected');
    setWs(socket);
    return () => socket.close();
  }, [busId]);

  const sendLocation = () => {
    if (ws && latitude && longitude) {
      ws.send(JSON.stringify({ latitude: parseFloat(latitude), longitude: parseFloat(longitude) }));
    }
  };

  return (
    <div style={{ padding: '20px' }}>
      <h2>Driver Page - Bus #{busId}</h2>
      <input value={latitude} onChange={(e) => setLatitude(e.target.value)} placeholder="Latitude" />
      <input value={longitude} onChange={(e) => setLongitude(e.target.value)} placeholder="Longitude" />
      <button onClick={sendLocation}>Send Location</button>
    </div>
  );
};

export default DriverPage;
✅ Step 3: Student Page – Display Map
Create a new file: src/StudentPage.js

jsx
Copy
Edit
import React, { useEffect, useRef, useState } from 'react';
import { MapContainer, TileLayer, Marker } from 'react-leaflet';

const StudentPage = ({ busId }) => {
  const [location, setLocation] = useState({ lat: 0, lng: 0 });

  useEffect(() => {
    const socket = new WebSocket(`ws://localhost:8000/ws/bus/${busId}/`);
    socket.onmessage = (event) => {
      const data = JSON.parse(event.data);
      setLocation({ lat: data.latitude, lng: data.longitude });
    };
    return () => socket.close();
  }, [busId]);

  return (
    <div>
      <h2>Student Map View - Bus #{busId}</h2>
      <MapContainer center={[location.lat, location.lng]} zoom={15} style={{ height: '500px', width: '100%' }}>
        <TileLayer
          attribution='&copy; OpenStreetMap'
          url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
        />
        <Marker position={[location.lat, location.lng]} />
      </MapContainer>
    </div>
  );
};

export default StudentPage;
✅ Step 4: App Setup
src/App.js

jsx
Copy
Edit
import React from 'react';
import DriverPage from './DriverPage';
import StudentPage from './StudentPage';

function App() {
  return (
    <div>
      /* <DriverPage busId={1} />
      <hr />
      <StudentPage busId={1} />
    </div>
  );
}

export default App;
✅ Step 5: Run the App
Start the Django server:

bash
Copy
Edit
python manage.py runserver
Start the React app:

bash
Copy
Edit
npm start
🎉 DONE!
🧪 Test it:
Open the app

Enter coordinates in Driver section (like 12.9716, 77.5946) → click Send

The map will update live in the Student section!

🧭 What's Next?
Optional improvements:

Add "auto" GPS with browser geolocation

Support multiple buses

Store past route in DB and draw path

Add arrival alerts

Let me know if you want me to help with auto-GPS from browser, drawing route lines, or multi-bus support!







You said:
yex


ChatGPT said:
Great! Let's now enhance the system with auto GPS from the browser (for drivers), so location updates happen automatically, without typing.

🚀 Upgrade: Auto GPS for Driver Page
We’ll use the browser's navigator.geolocation API to get the current location every few seconds and send it via WebSocket.

✅ Replace DriverPage.js with Auto GPS
src/DriverPage.js

jsx
Copy
Edit
import React, { useEffect, useState } from 'react';

const DriverPage = ({ busId }) => {
  const [ws, setWs] = useState(null);
  const [location, setLocation] = useState({ lat: 0, lng: 0 });

  // Open WebSocket
  useEffect(() => {
    const socket = new WebSocket(`ws://localhost:8000/ws/bus/${busId}/`);
    socket.onopen = () => console.log('WebSocket connected');
    socket.onclose = () => console.log('WebSocket disconnected');
    setWs(socket);
    return () => socket.close();
  }, [busId]);

  // Get location from browser every 5 seconds
  useEffect(() => {
    const interval = setInterval(() => {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          const { latitude, longitude } = position.coords;
          setLocation({ lat: latitude, lng: longitude });
          if (ws?.readyState === WebSocket.OPEN) {
            ws.send(JSON.stringify({ latitude, longitude }));
          }
        },
        (error) => console.error('GPS Error:', error),
        { enableHighAccuracy: true }
      );
    }, 5000); // Every 5 seconds

    return () => clearInterval(interval);
  }, [ws]);

  return (
    <div style={{ padding: '20px' }}>
      <h2>Driver Page (Auto GPS) - Bus #{busId}</h2>
      <p>Current Location:</p>
      <p>Latitude: {location.lat}</p>
      <p>Longitude: {location.lng}</p>
    </div>
  );
};

export default DriverPage;
🧪 Testing the Auto GPS Driver
Open your app in a browser that allows geolocation (like Chrome).

Allow location access when prompted.

Driver page will start sending location every 5 seconds automatically.

Student map will update in real-time.

⏭️ Next Upgrade Options
Let me know what you want next:

🗺️ Draw route path of the bus (student sees travel trail)?

🚍 Multiple buses support (choose a bus to track)?

🔔 Notification/alert when bus is near a location?

Reply with the number or name and I’ll continue building that next!
 */

